package com.ita.if103java.ims.dao.impl;

import com.ita.if103java.ims.dao.UserDao;
import com.ita.if103java.ims.entity.Role;
import com.ita.if103java.ims.entity.User;
import com.ita.if103java.ims.exception.CRUDException;
import com.ita.if103java.ims.exception.EntityNotFoundException;
import com.ita.if103java.ims.exception.UserNotFoundException;
import com.ita.if103java.ims.mapper.jdbc.UserRowMapper;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.*;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public class UserDaoImpl extends AbstractDao implements UserDao {


    private UserRowMapper userRowMapper;
    private JdbcTemplate jdbcTemplate;
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @Autowired
    public UserDaoImpl(DataSource dataSource, UserRowMapper userRowMapper) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
        this.bCryptPasswordEncoder = new BCryptPasswordEncoder();
        this.userRowMapper = userRowMapper;
        setLogger(LoggerFactory.getLogger(UserDaoImpl.class));
    }


    @Override
    public User create(User user) {
        try {
            ZonedDateTime currentDateTime = ZonedDateTime.now(ZoneId.systemDefault());
            String emailUUID = UUID.randomUUID().toString();
            GeneratedKeyHolder holder = new GeneratedKeyHolder();
            jdbcTemplate.update(connection -> createStatement(user, currentDateTime, emailUUID, connection), holder);
            user.setCreatedDate(currentDateTime);
            user.setUpdatedDate(currentDateTime);
            user.setEmailUUID(emailUUID);
            user.setId(Optional.ofNullable(holder.getKey())
                .map(Number::longValue)
                .orElseThrow(() -> new CRUDException("Error during an user creation: " +
                    "Autogenerated key is null")));
            return user;
        } catch (DataAccessException e) {
            throw crudException(e, "create, " + "id = " + user.getId());
        }
    }

    @Override
    public User findById(Long id) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_USER_BY_ID, userRowMapper, id);
        } catch (EmptyResultDataAccessException e) {
            throw entityNotFoundException(new UserNotFoundException("Failed to obtain User"), "findById, " + "id = " + id);
        } catch (DataAccessException e) {
            throw crudException(e, "findById, " + "id = " + id);
        }

    }

    @Override
    public User findByAccountId(Long accountId) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_USER_BY_ACCOUNT_ID, userRowMapper, accountId);
        } catch (EmptyResultDataAccessException e) {
            throw entityNotFoundException(new UserNotFoundException("Failed to obtain User"), "findByAccountId, " + "id = " + accountId);
        } catch (DataAccessException e) {
            throw crudException(e, "findByAccountId, " + "id = " + accountId);
        }

    }

    @Override
    public List<User> findAll() {
        try {
            return jdbcTemplate.query(Queries.SQL_SELECT_ALL_USERS, userRowMapper);
        } catch (DataAccessException e) {
            throw crudException(e, "findAll, " + "*");
        }
    }

    @Override
    public User findByEmail(String email) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_USER_BY_EMAIL, userRowMapper, email);
        } catch (EmptyResultDataAccessException e) {
            throw entityNotFoundException(new UserNotFoundException("Failed to obtain User"), "findByEmail, " + "email = " + email);
        } catch (DataAccessException e) {
            throw crudException(e, "findByEmail, " + "email = " + email);
        }
    }

    @Override
    public User update(User user) {
        int status;
        try {
            ZonedDateTime updatedDateTime = ZonedDateTime.now(ZoneId.systemDefault());
            status = jdbcTemplate.update(
                Queries.SQL_UPDATE_USER,
                user.getFirstName(),
                user.getLastName(),
                user.getEmail(),
                Timestamp.from(updatedDateTime.toInstant()),
                user.getId());

            user.setUpdatedDate(updatedDateTime);
        } catch (DataAccessException e) {
            throw crudException(e, "update, " + "id = " + user.getId());
        }
        if (status == 0)
            throw entityNotFoundException(new UserNotFoundException("Failed to obtain User"), "updateUser, " + "id = " + user.getId());

        return user;
    }

    @Override
    public boolean softDelete(Long id) {
        int status;
        try {
            status = jdbcTemplate.update(Queries.SQL_SET_ACTIVE_STATUS_USER, false, id);

        } catch (DataAccessException e) {
            throw crudException(e, "softDelete, " + "id = " + id);
        }
        if (status == 0)
            throw entityNotFoundException(new UserNotFoundException("Failed to obtain User"), "softDalete, " + "id = " + id);

        return true;
    }

    @Override
    public boolean hardDelete(Long id) {
        int status;
        try {
            status = jdbcTemplate.update(Queries.SQL_DELETE_USER_BY_ID, id);

        } catch (DataAccessException e) {
            throw crudException(e, "hardDelete, " + "id = " + id);
        }
        if (status == 0)
            throw entityNotFoundException(new UserNotFoundException("Failed to obtain User"), "hardDelete, " + "id = " + id);

        return true;
    }


    @Override
    public boolean updatePassword(Long id, String newPassword) {
        int status;
        try {
            String encryptedPassword = bCryptPasswordEncoder.encode(newPassword);
            status = jdbcTemplate.update(Queries.SQL_UPDATE_PASSWORD, encryptedPassword, id);

        } catch (DataAccessException e) {
            throw crudException(e, "updatePassword, " + "id = " + id);
        }
        if (status == 0)
            throw entityNotFoundException(new UserNotFoundException("Failed to obtain User"), "updatePassword, " + "id = " + id);

        return true;
    }

    @Override
    public User findByEmailUUID(String emailUUID) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_USER_BY_EMAIL_UUID, userRowMapper, emailUUID);
        } catch (EmptyResultDataAccessException e) {
            throw entityNotFoundException(new EntityNotFoundException("Failed to obtain User"), "findByEmailUUID, " + "email = " + emailUUID);
        } catch (DataAccessException e) {
            throw crudException(e, "findByEmailUUID, " + "email = " + emailUUID);
        }
    }

    private PreparedStatement createStatement(User user, ZonedDateTime currentDateTime,
                                              String emailUUID, Connection connection) throws SQLException {
        PreparedStatement preparedStatement = connection.prepareStatement(Queries.SQL_CREATE_USER, Statement.RETURN_GENERATED_KEYS);

        String encryptedPassword = "";
        Role role = Role.WORKER;
        if (user.getFirstName() != null) {
            user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
            role = Role.ADMIN;
        }
        user.setPassword(encryptedPassword);
        user.setRole(role);

        int i = 0;
        preparedStatement.setString(++i, user.getFirstName());
        preparedStatement.setString(++i, user.getLastName());
        preparedStatement.setString(++i, user.getEmail());
        preparedStatement.setString(++i, encryptedPassword);
        preparedStatement.setObject(++i, role.toString());
        preparedStatement.setObject(++i, Timestamp.from(currentDateTime.toInstant()));
        preparedStatement.setObject(++i, Timestamp.from(currentDateTime.toInstant()));
        preparedStatement.setBoolean(++i, user.isActive());
        preparedStatement.setString(++i, emailUUID);

        return preparedStatement;
    }

    class Queries {

        static final String SQL_CREATE_USER = "" +
            "INSERT INTO users(first_name, last_name, email, password, role, created_date, updated_date, active, email_uuid)" +
            " VALUES(?,?,?,?,?,?,?,?,?)";

        static final String SQL_SELECT_USER_BY_ID = "SELECT * FROM users WHERE id = ?";

        static final String SQL_SELECT_USER_BY_EMAIL = "SELECT * FROM users WHERE email = ?";

        static final String SQL_SELECT_ALL_USERS = "SELECT * FROM users";

        static final String SQL_SELECT_USER_BY_ACCOUNT_ID = "SELECT * FROM users WHERE account_id = ?";

        static final String SQL_UPDATE_USER = "UPDATE users SET " +
            "first_name= ?, last_name = ?," +
            "email = ?, updated_date = ? WHERE id = ?";

        static final String SQL_SET_ACTIVE_STATUS_USER = "UPDATE users SET active = ? WHERE id = ?";

        static final String SQL_UPDATE_PASSWORD = "UPDATE users SET password = ? WHERE id = ?";

        static final String SQL_SELECT_USER_BY_EMAIL_UUID = "SELECT * FROM users WHERE email_uuid = ?";

        static final String SQL_DELETE_USER_BY_ID = "DELETE FROM users WHERE id = ? ";
    }
}
