package com.ita.if103java.ims.dao.impl;

import com.ita.if103java.ims.dao.TransactionDao;
import com.ita.if103java.ims.entity.Transaction;
import com.ita.if103java.ims.exception.CRUDException;
import com.ita.if103java.ims.exception.TransactionNotFoundException;
import com.ita.if103java.ims.mapper.jdbc.TransactionRowMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.Types;

import static com.ita.if103java.ims.util.JDBCUtils.createWithAutogeneratedId;


@Repository
public class TransactionDaoImpl implements TransactionDao {
    private JdbcTemplate jdbcTemplate;
    private NamedParameterJdbcTemplate namedJdbcTemplate;
    private TransactionRowMapper mapper;

    @Autowired
    public TransactionDaoImpl(JdbcTemplate jdbcTemplate, NamedParameterJdbcTemplate namedJdbcTemplate,
                              TransactionRowMapper mapper) {
        this.jdbcTemplate = jdbcTemplate;
        this.namedJdbcTemplate = namedJdbcTemplate;
        this.mapper = mapper;
    }

    @Override
    public Transaction create(Transaction transaction) {
        try {
            final Long id = createWithAutogeneratedId(keyHolder ->
                namedJdbcTemplate.update(Queries.SQL_CREATE_TRANSACTION, getSqlParameterSource(transaction), keyHolder)
            );
            transaction.setId(id);
            return transaction;
        } catch (DataAccessException e) {
            throw new CRUDException("Error during a transaction 'insert' -> Transaction.create(" + transaction + ")", e);
        }
    }

    @Override
    public Transaction findById(Long id) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_TRANSACTION_BY_ID, mapper, id);
        } catch (EmptyResultDataAccessException e) {
            throw new TransactionNotFoundException("Transaction not found -> Transaction.findById(" + id + ")", e);
        } catch (DataAccessException e) {
            throw new CRUDException("Error during a transaction 'select' -> Transaction.findById(" + id + ")", e);
        }
    }

    private MapSqlParameterSource getSqlParameterSource(Transaction transaction) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
            .addValue("account_id", transaction.getAccountId())
            .addValue("worker_id", transaction.getWorkerId())
            .addValue("item_id", transaction.getItemId())
            .addValue("quantity", transaction.getAccountId())
            .addValue("associate_id", transaction.getAssociateId())
            .addValue("moved_from", transaction.getMovedFrom())
            .addValue("moved_to", transaction.getMovedTo())
            .addValue("type", transaction.getType());
        parameterSource.registerSqlType("type", Types.VARCHAR);
        return parameterSource;
    }

    public static final class Queries {
        public static final String SQL_CREATE_TRANSACTION = """
                insert into transactions(account_id, worker_id, associate_id, item_id, quantity, moved_from, moved_to, type)
                values (:account_id, :worker_id, :associate_id, :item_id, :quantity, :moved_from, :moved_to, :type)
            """;

        public static final String SQL_SELECT_TRANSACTION_BY_ID = """
                select * from transactions where id = ?
            """;
    }
}
