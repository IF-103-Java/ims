package com.ita.if103java.ims.dao;

import com.ita.if103java.ims.entity.User;
import com.ita.if103java.ims.exception.CRUDException;
import com.ita.if103java.ims.exception.EntityNotFoundException;
import com.ita.if103java.ims.mapper.UserRowMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public class UserDaoImpl implements UserDao {

    private UserRowMapper userRowMapper;
    private JdbcTemplate jdbcTemplate;
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    private static Logger logger = LoggerFactory.getLogger(UserDaoImpl.class);

    @Autowired
    public UserDaoImpl(DataSource dataSource, UserRowMapper userRowMapper) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
        this.bCryptPasswordEncoder = new BCryptPasswordEncoder();
        this.userRowMapper = userRowMapper;
    }

    private PreparedStatement createStatement(User user, String encryptedPassword, LocalDateTime localDateTime, Connection connection) throws SQLException {
        PreparedStatement preparedStatement = connection.prepareStatement(Queries.SQL_CREATE_USER, Statement.RETURN_GENERATED_KEYS);

        preparedStatement.setString(1, user.getFirstName());
        preparedStatement.setString(2, user.getLastName());
        preparedStatement.setString(3, user.getEmail());
        preparedStatement.setString(4, "" + encryptedPassword);
        preparedStatement.setObject(5, user.getRole());
        preparedStatement.setObject(6, localDateTime);
        preparedStatement.setObject(7, localDateTime);
        preparedStatement.setBoolean(8, user.isActive());
        preparedStatement.setString(9, user.getEmailUUID());

        return preparedStatement;
    }


    @Override
    public User create(User user) {
        try {
            LocalDateTime currentDate = LocalDateTime.now();
            String encryptedPassword = bCryptPasswordEncoder.encode(user.getPassword());
            GeneratedKeyHolder holder = new GeneratedKeyHolder();
            jdbcTemplate.update(connection -> createStatement(user, encryptedPassword, currentDate, connection), holder);
            user.setCreatedDate(currentDate);
            user.setUpdatedDate(currentDate);
            user.setId(Optional.ofNullable(holder.getKey()).map(Number::longValue)
                .orElseThrow(() -> new CRUDException("Error during an user creation: " +
                    "Autogenerated key is null")));
            return user;
        } catch (Exception e) {
            throw crudException("Create user exception", "create", "id = " + user.getId());
        }
    }

    @Override
    public User findById(Long id) {
        User user = null;
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_USER_BY_EMAIL, userRowMapper, id);
        } catch (EmptyResultDataAccessException e) {
            throw userEntityNotFoundException("User not found", "id = " + id);
        } catch (Exception e) {
            throw crudException("Get user exception", "get", "id = " + id);
        }

    }

    @Override
    public User findByAccountId(Long accountId) {
        User user = null;
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_USER_BY_ACCOUNT_ID, userRowMapper, accountId);
        } catch (EmptyResultDataAccessException e) {
            throw userEntityNotFoundException("User not found", "id = " + accountId);
        } catch (Exception e) {
            throw crudException("Get user exception", "get", "id = " + accountId);
        }

    }

    @Override
    public List<User> findAll(int from, int to) {
        try {
            return jdbcTemplate.query(Queries.SQL_SELECT_ALL_USERS, userRowMapper, to - from, from);
        } catch (Exception e) {
            throw crudException("Get all users exception", "get", "*");
        }
    }

    @Override
    public User findByEmail(String email) {
        User user = null;
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_SELECT_USER_BY_ID, userRowMapper, email);
        } catch (EmptyResultDataAccessException e) {
            throw userEntityNotFoundException("User not found", "email = " + email);
        } catch (Exception e) {
            throw crudException("Get user exception", "get", "email = " + email);
        }
    }

    @Override
    public User update(User user) {
        int status;
        try {
            LocalDateTime updatedDate = LocalDateTime.now();
            status = jdbcTemplate.update(
                Queries.SQL_UPDATE_USER,
                user.getFirstName(),
                user.getLastName(),
                user.getEmail(),
                user.getPassword(),
                updatedDate,
                user.getId());

            user.setUpdatedDate(updatedDate);
        } catch (Exception e) {
            throw crudException("Update user exception", "update", "id = " + user.getId());
        }
        if (status == 0) {
            throw userEntityNotFoundException("Update user exception", "id = " + user.getId());
        }

        return user;
    }

    @Override
    public boolean delete(Long id) {
        int status;
        try {
            status = jdbcTemplate.update(Queries.SQL_SET_ACTIVE_STATUS_USER, false, id);

        } catch (Exception e) {
            throw crudException("Delete user exception", "delete", "id = " + id);
        }
        if (status == 0) {
            throw userEntityNotFoundException("Delete user exception", "id = " + id);
        } else {
            return true;
        }
    }

    @Override
    public boolean updatePassword(Long id, String newPassword) {
        int status;
        try {
            String encryptedPassword = bCryptPasswordEncoder.encode(newPassword);
            status = jdbcTemplate.update(Queries.SQL_UPDATE_PASSWORD, encryptedPassword, id);

        } catch (Exception e) {
            throw crudException("Update user password exception", "update", "id = " + id);
        }
        if (status == 0) {
            throw userEntityNotFoundException("Update user password exception", "id = " + id);
        } else {
            return true;
        }
    }

    private EntityNotFoundException userEntityNotFoundException(String message, String attribute) {
        EntityNotFoundException exception = new EntityNotFoundException(message);
        logger.error("EntityNotFoundException exception. User is not found ({}). Message: {}", attribute, message);
        return exception;
    }

    private CRUDException crudException(String message, String operation, String attribute) {
        CRUDException exception = new CRUDException(message);
        logger.error("CRUDException exception. Operation:({}) user ({}) exception. Message: {}", operation, attribute, message);
        return exception;
    }

    class Queries {

        static final String SQL_CREATE_USER = "" +
            "INSERT INTO users(first _name, last_name, email, password, role, created_date, updated_date, active, email_uuid)" +
            "VALUES(?,?,?,?,?,?,?,?,?)";

        static final String SQL_SELECT_USER_BY_ID = "SELECT* FROM users WHERE id = ?";

        static final String SQL_SELECT_USER_BY_EMAIL = "SELECT* FROM users WHERE email = ?";

        static final String SQL_SELECT_ALL_USERS = "SELECT* FROM users";

        static final String SQL_SELECT_USER_BY_ACCOUNT_ID = "SELECT* FROM users WHERE account_id = ?";

        static final String SQL_UPDATE_USER = "UPDATE users SET " +
            "first_name= ?, last_name = ?," +
            "email = ?, password = ?," +
            "updated_date = ? WHERE id = ?";

        static final String SQL_SET_ACTIVE_STATUS_USER = "UPDATE users SET active = ? WHERE id = ?";

        static final String SQL_UPDATE_PASSWORD = "UPDATE users SET password = ? WHERE id = ?";
    }
}
